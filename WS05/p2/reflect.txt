///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Kiet Dung Truong
Student ID#: 122088230

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////
1. You learned several iteration constructs in the previous two weeks (do-while, while, for). In this workshop, you had to validate the rating values entered by the user. Can you use the “for” iteration construct to do that? Why?2. You can print the month in part 2 of this workshop using two different selection constructs; which one did you select? Why?3. Why do we try to use variables and macros to represent information rather than hardcode “magic” numbers (constant literals)? Using the details of this workshop, describe at least three advantages this provides us.


1. No, because we do not know how many times will the users give input (cannot control the times that users give wrong input (not in 0.0-5.0 range))

2. I can use case-by-case and multiple selection. I chose case-by-case because input is integer and it is easier than if-elseif. 

3.   
Using variables and macros: 

if (year < MIN_YEAR || year > MAX_YEAR)
        {
            printf("   ERROR: The year must be between 2012 and 2022 inclusive\n");
        }
Using  constant literals: 
if (year < 2012 || year > 2022)
        {
            printf("   ERROR: The year must be between 2012 and 2022 inclusive\n");

Reasons for using variables and macros: 
a. Readability and maintainability: it is easy to understand in the first time looking at the source code. If we write a number (2012 or 2022), we have to find what is the meaning of the number. Therefore, this makes maintenance easier as developer can quickly grasp the intention of the code without needing to decipher the value of hardcode. 
b. Scalability and Flexibility: if a constant variable need to be changed, we can easily change it in one place. 
c. Parameterization: variables and macros can be used to parameterize values, making code more generic and adaptable to different scenarios. This makes code reusable and reduces the need for duplicate code with minor variations.